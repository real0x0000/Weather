//
//  CityWeatherInteractor.swift
//  Weather
//
//  Created by Anuwat Sittichak on 18/4/2563 BE.
//  Copyright (c) 2563 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityWeatherBusinessLogic {
    func getCurrentWeather(request: CityWeatherModels.GetCurrentWeather.Request)
}

protocol CityWeatherDataStore {
    var keyword: String { get set }
}

final class CityWeatherInteractor: CityWeatherBusinessLogic, CityWeatherDataStore {
    var keyword: String = ""
    var presenter: CityWeatherPresentationLogic?
    var weatherWorker: WeatherWorker?
  
    func getCurrentWeather(request: CityWeatherModels.GetCurrentWeather.Request) {
        keyword = request.cityName
        typealias Response = CityWeatherModels.GetCurrentWeather.Response
        var response: Response
        response = Response(result: UserResult.loading)
        presenter?.presentCurrentWeather(response: response)
        let data = GetWeatherRequestData(q: request.cityName)
        weatherWorker?.getCurrentWeather(data: data, completion: { [weak self] (result) in
            switch result {
            case .success(let data):
                response = Response(result: UserResult.success(result: data))
            case .failure(let error):
                response = Response(result: UserResult.failure(userError: error))
            }
            self?.presenter?.presentCurrentWeather(response: response)
        })
    }
}

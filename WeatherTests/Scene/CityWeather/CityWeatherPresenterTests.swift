//
//  CityWeatherPresenterTests.swift
//  Weather
//
//  Created by Anuwat Sittichak on 21/4/2563 BE.
//  Copyright (c) 2563 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Weather
import XCTest

class CityWeatherPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: CityWeatherPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCityWeatherPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCityWeatherPresenter() {
        sut = CityWeatherPresenter()
    }
    
    // MARK: Test doubles
    
    class CityWeatherDisplayLogicSpy: CityWeatherDisplayLogic {
        var displaySelectDegreeCalled = false
        var displayCurrentWeatherCalled = false
        
        func displaySelectDegree(viewModel: CityWeatherModels.SelectDegree.ViewModel) {
            displaySelectDegreeCalled = true
        }
        
        func displayCurrentWeather(viewModel: CityWeatherModels.GetCurrentWeather.ViewModel) {
            displayCurrentWeatherCalled = true
        }
    }
    
    // MARK: Tests
    
    func testPresentSelectDegreeShouldAskViewControllerToDisplaySelectDegree() {
        // Given
        let viewControllerSpy = CityWeatherDisplayLogicSpy()
        sut.viewController = viewControllerSpy
        
        // When
        let response = CityWeatherModels.SelectDegree.Response()
        sut.presentSelectDegree(response: response)
        
        // Then
        XCTAssert(viewControllerSpy.displaySelectDegreeCalled, "presentSelectDegree() should ask viewController to displaySelectDegree()")
    }
    
    func testPresentCurrentWeatherShouldAskViewControllerToDisplayCurrentWeather() {
        // Given
        let viewControllerSpy = CityWeatherDisplayLogicSpy()
        sut.viewController = viewControllerSpy
        
        // When
        let weather = CurrentWeather.mockData()
        let result = UserResult.success(result: weather)
        let response = CityWeatherModels.GetCurrentWeather.Response(result: result)
        sut.presentCurrentWeather(response: response)
        
        // Then
        XCTAssert(viewControllerSpy.displayCurrentWeatherCalled, "presentCurrentWeather() should ask viewController to displayCurrentWeather()")
    }
}

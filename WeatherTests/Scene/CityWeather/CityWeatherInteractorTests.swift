//
//  CityWeatherInteractorTests.swift
//  Weather
//
//  Created by Anuwat Sittichak on 21/4/2563 BE.
//  Copyright (c) 2563 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Weather
import XCTest

class CityWeatherInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: CityWeatherInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCityWeatherInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCityWeatherInteractor() {
        sut = CityWeatherInteractor()
    }
    
    // MARK: Test doubles
    
    class CityWeatherPresentationLogicSpy: CityWeatherPresentationLogic {
        var presentSelectDegreeCalled = false
        var presentCurrentWeatherCalled = false
        
        func presentSelectDegree(response: CityWeatherModels.SelectDegree.Response) {
            presentSelectDegreeCalled = true
        }
        
        func presentCurrentWeather(response: CityWeatherModels.GetCurrentWeather.Response) {
            presentCurrentWeatherCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSelectDegreeShouldAskPresenterToPresentSelectDegree() {
        // Given
        let presenterSpy = CityWeatherPresentationLogicSpy()
        sut.presenter = presenterSpy
        
        // When
        let request = CityWeatherModels.SelectDegree.Request(degree: .celsius)
        sut.selectDegree(request: request)
        
        // Then
        XCTAssert(presenterSpy.presentSelectDegreeCalled, "selectDegree() should ask presenter to presentSelectDegree()")
    }
    
    func testGetCurrentWeatherShouldAskPresenterToPresentCurrentWeather() {
        // Given
        let presenterSpy = CityWeatherPresentationLogicSpy()
        sut.presenter = presenterSpy
        
        // When
        let request = CityWeatherModels.GetCurrentWeather.Request(cityName: "test")
        sut.getCurrentWeather(request: request)
        
        // Then
        XCTAssert(presenterSpy.presentCurrentWeatherCalled, "getCurrentWeather() should ask presenter to presentCurrentWeather()")
    }
}
